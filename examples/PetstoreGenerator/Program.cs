// This file is an example of how to use Ryooag, licensed with the same terms as the main project.
// Don't use it in production, your project is likely more complex than this.
// I've taken shortcuts at many places here (look out for the `// sc:` comments, not an exhaustive list), because I know the source schema, and I don't need to deal with all the complexity.
// I encourage you to keep it simple in your projects too, unless you totally need that complexity and can manage the cost of maintaining it

using System.Text;
using System.Text.Json;
using PetstoreGenerator;
using Ryooag;

var fileContent = await File.ReadAllBytesAsync("petstore-expanded.json");
var document = JsonSerializer.Deserialize<OpenApiDocument>(fileContent)!;

var sb = new StringBuilder();
sb.AppendLine("// This file is generated by the PetstoreGenerator program. Do not edit by hand.");
sb.AppendLine("// This file is saved into git so that we can track changes between version and to give an overview of what the program does.");
sb.AppendLine();
sb.AppendLine("namespace PetstoreGenerator.TestApp;");
sb.AppendLine();

// Loop through the models
foreach (var model in document.GetModels())
{
    var schema = model.schema;
    var properties = string.Join(", ", schema.GetAllProperties(document).Select(prop => prop.ToCSharp()));
    sb.AppendFormat("public record {0}({1});", model.name, properties);
    sb.AppendLine();
}

var outputFilePath = Path.Combine(AppContext.BaseDirectory, "..", "..", "..", "..", "PetstoreGenerator.TestApp", "PetstoreClient.cs");
await File.WriteAllTextAsync(outputFilePath, sb.ToString());
